from rest_framework import viewsets
from .models import BookCategory, Book, BookAudioPart, PageRange, Category
from .serializers import BookCategorySerializer, BookSerializer, BookAudioPartSerializer, PageRangeSerializer, CategorySerializer
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework import status
from google.cloud import storage
import mimetypes
from django.conf import settings
storage_client = storage.Client(credentials=settings.GS_CREDENTIALS)
class BookCategoryViewSet(viewsets.ModelViewSet):
    queryset = BookCategory.objects.all()
    serializer_class = BookCategorySerializer
    http_method_names = ['get', 'post', 'put', 'delete']  # –ø–æ–∫–∞ –±–µ–∑ patch –∏ delete

class BookViewSet(viewsets.ModelViewSet):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
    http_method_names = ['get', 'post', 'put', 'delete']
    @action(detail=True, methods=['post'], url_path='upload_pdf')
    def upload_pdf(self, request, pk=None):
        try:
            print("üì• –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –Ω–∞ upload_pdf")
            book = self.get_object()
            print(f"üìö –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: {book.title} (ID: {book.id})")

            file = request.FILES.get('file')

            if not file:
                print("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ request.FILES")
                return Response({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)

            book = self.get_object()
            print(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {file.name}")
            bucket_name = 'my-django-buckets'
            blob_path = f"books_pdfs/book_{book.id}/{file.name}"
            print(f"üìÅ –ü—É—Ç—å –∫ blob: {blob_path}")

            storage_client = storage.Client(credentials=settings.GS_CREDENTIALS)
            bucket = storage_client.bucket(bucket_name)
            blob = bucket.blob(blob_path)
            blob.upload_from_file(file, content_type=file.content_type)
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Cloud Storage")

            # –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞
            public_url = f"https://storage.googleapis.com/{bucket_name}/{blob_path}"
            print(f"üåê –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {public_url}")
            # –ï—Å–ª–∏ —É Book –µ—Å—Ç—å –ø–æ–ª–µ –ø–æ–¥ PDF ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É
            book.pdf_url = public_url  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            book.save()
            print("üìå –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –º–æ–¥–µ–ª—å Book")

            return Response({"message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω", "url": public_url}, status=status.HTTP_200_OK)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
    @action(detail=True, methods=['post'], url_path='upload_image')
    def upload_image(self, request, pk=None):
        try:
            print("üì• –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω –Ω–∞ upload_image")
            book = self.get_object()
            file = request.FILES.get('file')

            if not file:
                return Response({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=status.HTTP_400_BAD_REQUEST)

            allowed_types = ['image/jpeg', 'image/png', 'image/svg+xml']
            if file.content_type not in allowed_types:
                return Response({"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞"}, status=status.HTTP_400_BAD_REQUEST)

            bucket_name = settings.GS_BUCKET_NAME
            blob_path = f"cover_images/book_{book.id}/{file.name}"

            storage_client = storage.Client(credentials=settings.GS_CREDENTIALS)
            bucket = storage_client.bucket(bucket_name)
            blob = bucket.blob(blob_path)
            blob.upload_from_file(file, content_type=file.content_type)

            public_url = f"https://storage.googleapis.com/{bucket_name}/{blob_path}"
            book.cover_image = public_url
            book.save()

            print(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {public_url}")
            return Response({"message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", "url": public_url}, status=status.HTTP_200_OK)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
class BookAudioPartViewSet(viewsets.ModelViewSet):
    queryset = BookAudioPart.objects.all()
    serializer_class = BookAudioPartSerializer
    http_method_names = ['get', 'post', 'put', 'delete']

class PageRangeViewSet(viewsets.ModelViewSet):
    queryset = PageRange.objects.all()
    serializer_class = PageRangeSerializer
    http_method_names = ['get', 'post', 'put', 'delete']

class CategoryViewSet(viewsets.ModelViewSet):
    queryset = Category.objects.all()
    serializer_class = CategorySerializer
    http_method_names = ['get', 'post', 'put', 'delete']
